[project]
name = "jerry_mcguire"
version = "0.1.0"
description = "Jerry Mcguire expenses API"
authors = [
    {name = "Jordy Cuan", email = "jcuan4@gmail.com"},
]
readme = "README.md"

requires-python = "~=3.12"
dependencies = [
    "alembic>=1.14.0",
    "bcrypt>=4.2.1",
    "fastapi[all]>=0.115.6",
    "pydantic-settings>=2.7.0",
    "passlib>=1.7.4",
    "psycopg2-binary~=2.9.10",
    "python-jose[cryptography]>=3.3.0",
    "pytz~=2024.2",
    "sqlalchemy>=2.0.36",
]

[tool.uv]
default-groups = ["dev", "testing"]

[dependency-groups]
dev = [
    "bandit>=1.7.5",
    "black>=23.7.0",
    "flake8>=6.1.0",
    "isort>=5.12.0",
    "mypy>=1.5.1",
    "pre-commit>=3.3.3",
    "ruff>=0.8.3",
]
testing = [
    "pytest-cov>=4.1",
    "pytest>=7.4",
]

[tool.isort]
profile = "black"
line_length = 110

[tool.bandit]
exclude_dirs = ["tests", ".venv", "__pycache__"]

[tool.black]
line-length = 110

[tool.mypy]
plugins = [
  "pydantic.mypy",
  "sqlmypy",
]
python_version = "3.12"
follow_imports = "skip"

# Settings utils
[[tool.mypy.overrides]]
module = "utils.*"
strict = true

# Settings app
[[tool.mypy.overrides]]
module = "app.*"
strict = true

# Settings tests
[[tool.mypy.overrides]]
module = "tests.*"
strict = false


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true




[tool.ruff]
line-length = 110
indent-width = 4
target-version = "py312"
extend-exclude = [
    ".venv",
    ".pytest_cache",
    ".hypothesis",
    ".vscode",
    "docs",
    "examples"
]

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",   # pydocstyle
    "E",   # pycodestyle (error)
    "F",   # pyflakes
    "I",   # isort
    "ISC", # flake8-implicit-str-concat
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TD",  # flake8-todos
    "UP",  # pyupgrade
    "W"    # pycodestyle (warning)
]
ignore = [
    "B008",   # FastAPI dependencies
    "UP007",  # Typing as Optional
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in __init__
    "D205",   # Blank line required between summary and description
    "RET503", # Missing explicit return at the end of function able to return non-None value
    "SIM102", # Use ternary operator {contents} instead of if-else-block
    "TD003"   # Missing issue link on the line following this TODO
]
unfixable = [
    "F601",   # Dictionary key literal {name} repeated
    "F602",   # Dictionary key {name} repeated
    "SIM112"  # Use capitalized environment variable {expected} instead of {actual}
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
order-by-type = true
lines-between-types = 1

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101" # Use of assert detected
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true


[tool.flake8]
ignore = ["E203", "W503", "F403"]
max-line-length = 110
max-complexity = 10
exclude = [
    "venv",
    "__pycache__",
    ".git",
    "__init__.py",
    ".mypy_cache",
    "pytest_cache",
]


[tool.pytest.ini_options]
addopts = [
  "--strict-config",
  "--strict-markers",
  "--disable-pytest-warnings",
]
xfail_strict = true
python_functions = ["test_*"]
testpaths = ["tests"]
python_files = ["test_*.py"]
